trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  containerRegistry: 'mytetragonregistry.azurecr.io'
  imageRepository: 'tetragon-demo-app'
  dockerfilePath: '$(Build.SourcesDirectory)/Dockerfile'
  tag: '$(Build.BuildId)'

stages:
- stage: Build
  displayName: Build and Security Scan
  jobs:
  - job: Build
    displayName: Build Job
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        npm install
        npm run test
      displayName: 'npm install and test'

    # FIXED: Docker build with proper ACR service connection
    - task: Docker@2
      displayName: Build and push image
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: 'mytetragonregistry-connection'  # Service connection created in Step 1
        tags: |
          $(tag)
          latest

    # Container vulnerability scanning with Trivy
    - script: |
        # Install Trivy
        sudo apt-get update
        sudo apt-get install wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy
        
        # Scan the built image
        trivy image --format json --output trivy-results.json $(containerRegistry)/$(imageRepository):$(tag)
        trivy image --format table $(containerRegistry)/$(imageRepository):$(tag)
      displayName: 'Container Vulnerability Scan'

    # FIXED: Kubernetes manifest security scanning
    - script: |
        # Install Kubescape
        curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
        
        # FIXED: Add Kubescape to PATH
        export PATH=$PATH:/home/vsts/.kubescape/bin
        
        # Verify Kubescape is accessible
        kubescape version
        
        # Scan Kubernetes manifests
        kubescape scan k8s-manifests/ --format json --output kubescape-results.json
        kubescape scan k8s-manifests/ --format pretty-printer
      displayName: 'Kubernetes Security Scan'

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Security Scan Results'
      inputs:
        pathToPublish: '.'
        artifactName: 'security-scan-results'

- stage: Deploy
  displayName: Deploy to AKS
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: Deploy
    displayName: Deploy Job
    steps:
    # Deploy the application first
    - task: KubernetesManifest@0
      displayName: Deploy Application
      inputs:
        action: deploy
        kubernetesServiceConnection: 'aks-connection'
        manifests: |
          k8s-manifests/deployment.yaml
          k8s-manifests/service.yaml

    # FIXED: Use namespace-scoped TracingPolicies to avoid RBAC issues
    - task: KubernetesManifest@0
      displayName: Apply Tetragon Security Policies (Namespace-scoped)
      inputs:
        action: deploy
        kubernetesServiceConnection: 'aks-connection'
        namespace: 'default'
        manifests: |
          security/tetragon-namespace-policies.yaml
      continueOnError: true  # Don't fail deployment if policies fail

    # Verify deployment readiness
    - task: Kubernetes@1
      displayName: 'Wait for Pods to be Ready'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-connection'
        command: 'wait'
        arguments: '--for=condition=ready pod -l app=tetragon-demo-app --timeout=300s'

    # Check pod status
    - task: Kubernetes@1
      displayName: 'Check Pod Status'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-connection'
        command: 'get'
        arguments: 'pods -l app=tetragon-demo-app -o wide'

    # Check service status
    - task: Kubernetes@1
      displayName: 'Check Service Status'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-connection'
        command: 'get'
        arguments: 'service tetragon-demo-app-service'

    # Check Tetragon policies
    - task: Kubernetes@1
      displayName: 'Check Tetragon Policies'
      inputs:
        connectionType: 'Kubernetes Service Connection'
        kubernetesServiceEndpoint: 'aks-connection'
        command: 'get'
        arguments: 'tracingpoliciesnamespaced -n default'
      continueOnError: true
